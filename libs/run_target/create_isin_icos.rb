#!/usr/bin/ruby
# -*- coding: utf-8 -*-
#
# isin(), icos() を作るためのスクリプト
# Satofumi KAMIMURA
# $Id: create_isincos.rb 1360 2009-10-03 06:18:07Z satofumi $

# 絶対値の最大値、角度分割数の設定
angle_div = 65536               # 65536 -> [0, 65535]
divid_shift = 10                # 16 -> [-32767, +32767]
divid_max = 1 << divid_shift
angle_quad = angle_div >> 2

# 分割具合の設定 (0で誤差なし)
table_shift_value = 7
#table_shift_value = 0

if ARGV[0] == "header"
print <<-"EOB"
#ifndef QRK_ISIN_ICOS_H
#define QRK_ISIN_ICOS_H

/*!
  \\file
  \\brief 整数型の sin(), cos()

  整数型の三角関数(sin(), cos())を提供する

  \\author Satofumi KAMIMURA

  $Id: create_isincos.rb 1360 2009-10-03 06:18:07Z satofumi $
*/


enum {
  ISINCOS_ANGLE_DIVIDED = #{angle_div}, /* [0, #{angle_div}] */
  ISINCOS_SHIFT_WIDTH = #{divid_shift},
  ISINCOS_MAX_VALUE = #{divid_max},     /* [-#{divid_max}, +#{divid_max}] */
};


extern long isin(unsigned short direction);
extern long icos(unsigned short direction);

#endif /* !QRK_ISIN_ICOS_H */

EOB
  exit
end

# テーブル部分の出力

# get this file name
__FILE__ =~ /\/*(.+)$/
thisFile = $1

print <<-"EOB"
/*
  \\brief 整数型の sin, cos 関数

  This program generated by #{thisFile}

  \\author Satofumi KAMIMURA

  $Id: create_isincos.rb 1360 2009-10-03 06:18:07Z satofumi $

  angle_max = #{angle_div-1}
  divid_max = #{divid_max}
*/

#include "isin_icos.h"


static unsigned short sin_table[] = {
EOB

# 中の数値の表示
for i in 0 .. angle_div.to_i
  if i > (angle_quad.to_i >> table_shift_value)
    break
  end
  sin_val = divid_max.to_i \
  * Math::sin((2.0 * Math::PI * (i << table_shift_value).to_f / angle_div.to_f))
  print ' ', sin_val.round, ','
  if (i+1) % 10 == 0
    print "\n"
  end
end
print "};\n\n"

# isin(), icos() の部分の出力
print <<-"EOB"

static int sin_table_func(int n) {
EOB
if table_shift_value == 0
  print "  return sin_table[n];\n"
else
  print "  return sin_table[n >> #{table_shift_value}];\n"
end
print <<-"EOB"
}

/*!
  \\brief 整数型の sin()

  整数型の sin()

  \\param direction [i] 向き
  \\retval divid_max * sin(2.0 * M_PI * direction / 65536.0)
*/
long isin(unsigned short direction)
{
    long ret;

    if (direction <= #{angle_quad}) {
        ret = sin_table_func(direction);
    } else if (direction <= #{2 * angle_quad}) {
        ret = sin_table_func(#{2 * angle_quad} - direction);
    } else if (direction <= #{3 * angle_quad}) {
        ret = -sin_table_func(direction -#{2 * angle_quad});
    } else {
        ret = -sin_table_func(#{4 * angle_quad} - direction);
    }
    return ret;
}


/*!
  \\brief 整数型の cos()

  整数型の cos()。

  \\param direction [i] 角度[direction]
  \\retval divid_max * cos(2.0 * M_PI * direction / 65536.0)
*/
long icos(unsigned short direction)
{
    direction += #{3 * angle_quad};
EOB
if angle_div-1 != 0xffff
  print "    direction &= #{angle_div - 1};\n"
end
print <<-"EOB"
    return -isin(direction);
}
EOB
